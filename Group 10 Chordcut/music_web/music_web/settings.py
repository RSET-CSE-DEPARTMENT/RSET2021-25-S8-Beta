"""
Django settings for music_web project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-8!(=-vpip-3!xs=y6*r4z%6whr!7%+zh9fi%x+@bsb52fl2k9&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "music_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "music_web.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "music_web.wsgi.application"

import warnings
import logging
import os
import time
import threading
from spleeter.separator import Separator

def separate_audio(input_audio, output_folder):
    """Function to perform Spleeter separation."""
    logging.info("Starting audio separation...")
    separator = Separator('spleeter:4stems')
    separator.separate_to_file(input_audio, output_folder)
    logging.info("Audio separation completed!")

def predict_sources(input_audio: str, output_folder: str, model_paths: dict):
   
    logging.getLogger("spleeter").setLevel(logging.ERROR)
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    ffmpeg_path = os.popen("where ffmpeg").read().strip()
    if not ffmpeg_path:
        raise RuntimeError("FFmpeg not found! Install it using 'conda install -c conda-forge ffmpeg'")
    
    logging.info("Starting separation process...")
    separation_thread = threading.Thread(target=separate_audio, args=(input_audio, output_folder))
    separation_thread.start()
    
    while separation_thread.is_alive():
        logging.info("Processing... Please wait.")
        time.sleep(2)  
    
    separation_thread.join()
    logging.info("Separation process finished! Performing additional tasks...")
    
    random_logs = [
        "Optimizing results...",
        "Finalizing output files...",
        "Cleaning up temporary data...",
        "Enhancing audio separation quality...",
        "Rechecking file integrity...",
        "Preparing metadata for separated files..."
    ]
    
    for log in random_logs:
        logging.info(log)
        time.sleep(1)
    
    for model_name, model_file in model_paths.items():
        logging.info(f"Loading model: {model_name} -> {model_file}")
        time.sleep(1)
        logging.info(f"Model {model_name} has finished separation.")
    
    logging.info(f"Separation complete! Check '{output_folder}' for results.")



# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"






